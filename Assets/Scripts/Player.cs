//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""Playermain"",
            ""id"": ""d08f2628-5870-4e99-a468-c55f24107ba8"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""be4bdd0c-0775-45e2-b328-921948eb95d8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""pickup"",
                    ""type"": ""Button"",
                    ""id"": ""c75fee1a-043b-4cbc-9de2-7592b79b6480"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""d30e54d0-6e29-4d1c-9e26-be808a127399"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a7a1ef64-f94e-4dba-83d2-4a89ff33b7a3"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0098f87-0a9e-4597-80e5-97180f0e0d27"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a8a3e09-f938-48ed-bdc9-263ad6ddabfe"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Playermain
        m_Playermain = asset.FindActionMap("Playermain", throwIfNotFound: true);
        m_Playermain_Move = m_Playermain.FindAction("Move", throwIfNotFound: true);
        m_Playermain_pickup = m_Playermain.FindAction("pickup", throwIfNotFound: true);
        m_Playermain_Drop = m_Playermain.FindAction("Drop", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Playermain
    private readonly InputActionMap m_Playermain;
    private IPlayermainActions m_PlayermainActionsCallbackInterface;
    private readonly InputAction m_Playermain_Move;
    private readonly InputAction m_Playermain_pickup;
    private readonly InputAction m_Playermain_Drop;
    public struct PlayermainActions
    {
        private @Player m_Wrapper;
        public PlayermainActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Playermain_Move;
        public InputAction @pickup => m_Wrapper.m_Playermain_pickup;
        public InputAction @Drop => m_Wrapper.m_Playermain_Drop;
        public InputActionMap Get() { return m_Wrapper.m_Playermain; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayermainActions set) { return set.Get(); }
        public void SetCallbacks(IPlayermainActions instance)
        {
            if (m_Wrapper.m_PlayermainActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayermainActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayermainActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayermainActionsCallbackInterface.OnMove;
                @pickup.started -= m_Wrapper.m_PlayermainActionsCallbackInterface.OnPickup;
                @pickup.performed -= m_Wrapper.m_PlayermainActionsCallbackInterface.OnPickup;
                @pickup.canceled -= m_Wrapper.m_PlayermainActionsCallbackInterface.OnPickup;
                @Drop.started -= m_Wrapper.m_PlayermainActionsCallbackInterface.OnDrop;
                @Drop.performed -= m_Wrapper.m_PlayermainActionsCallbackInterface.OnDrop;
                @Drop.canceled -= m_Wrapper.m_PlayermainActionsCallbackInterface.OnDrop;
            }
            m_Wrapper.m_PlayermainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @pickup.started += instance.OnPickup;
                @pickup.performed += instance.OnPickup;
                @pickup.canceled += instance.OnPickup;
                @Drop.started += instance.OnDrop;
                @Drop.performed += instance.OnDrop;
                @Drop.canceled += instance.OnDrop;
            }
        }
    }
    public PlayermainActions @Playermain => new PlayermainActions(this);
    public interface IPlayermainActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
    }
}
